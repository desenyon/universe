# Universe Network Scanner - Git Ignore File
# Developed by Desenyon - https://github.com/desenyon/universe

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to use the following settings:
.idea/

# VS Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# ===========================================
# Universe Network Scanner Specific Ignores
# ===========================================

# Configuration files (may contain sensitive data)
config.yaml
config.yml
*.config
universe.conf
.universe/

# Network scan results and reports
scan_results/
reports/
exports/
output/
*.scan
*.audit
*.monitoring

# Log files
logs/
*.log
universe.log
monitor.log
audit.log

# Database files
*.db
*.sqlite
*.sqlite3
universe.db
scan_history.db

# Cache directories
cache/
.cache/
universe_cache/

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Export files (unless specifically needed)
*.png
*.svg
*.pdf
*.csv
*.json
*.md
!README.md
!GETTING_STARTED.md
!LICENSE.md

# Network capture files
*.pcap
*.pcapng
*.cap

# SSL/TLS certificates and keys
*.pem
*.key
*.crt
*.cert
*.p12
*.pfx

# Environment specific files
.env.local
.env.development
.env.test
.env.production

# Backup files
*.bak
*.backup
*.old
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
*.exe
*.msi
*.lnk

# Linux
*.deb
*.rpm
*.tar.gz
*.tar.xz

# macOS
*.dmg
*.app

# Installation artifacts
install_log.txt
installation/
build_artifacts/

# User-specific data
user_data/
personal/
private/

# Testing artifacts
test_outputs/
test_reports/
test_data/
mock_data/

# Development tools
.mypy_cache/
.pytest_cache/
.coverage
htmlcov/

# Documentation build
docs/build/
docs/_build/

# Package management
Pipfile
Pipfile.lock
poetry.lock
conda-meta/

# Virtual environments
.python-version
pyenv.cfg

# Network scanner specific temporary files
nmap_temp/
scapy_temp/
arp_cache/
device_cache/

# Monitoring data
monitoring_data/
alerts/
notifications/

# Security audit files
audit_reports/
vulnerability_scans/
compliance_reports/

# Binary executables
universe
universe.exe
bin/universe
dist/universe

# Large data files
*.dat
*.data
large_scan_results/

# Git specific
.git/
.gitattributes

# Editor specific
*.swp
*.swo
*~
.#*
\#*#

# Archive files
*.zip
*.tar
*.gz
*.bz2
*.xz
*.7z
*.rar

# Don't ignore specific important files
!requirements.txt
!pyproject.toml
!setup.py
!setup.cfg
!MANIFEST.in
!LICENSE
!.github/
!docs/
!tests/
!examples/
